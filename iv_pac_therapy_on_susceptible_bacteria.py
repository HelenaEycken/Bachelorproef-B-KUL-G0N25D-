# -*- coding: utf-8 -*-
"""IV. PAC therapy on susceptible bacteria

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T0WSHLKzZcPrmsNXTsK0S1rmR-4zZnLo
"""

############################################################
### IV. PAC therapy on susceptible bacteria - Helena Eycken, Margot Debruyne, Vincent Smets ###
############################################################
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Define parameters
γ = 0.23                    # Decay rate of antibiotics
C = 0                       # Initial concentration of antibiotics
e = 1                       # Efficiency of antibiotics
ka = 10**(5.4)              # Antibiotic killing constant

K = 10**(7.94)              # Bacterial carrying capacity
rS = 1.85                   # Growth rate of sensitive bacteria

i = 10**(-6.21)             # Adsorption rate by phages
d = 0.10                    # Phage decay rate
b = 106                     # Burst size

# Initial populations
S0 = 10**(4.67)             # Initial sensitive bacteria population
P0 = 10**(6.27)             # Initial phage population
y0 = [C, S0, P0]

# Antibiotic injection function
def antibiotic_input(t):
    """
    Allows for antibiotic dosing at any time point.
    Infusion duration can be modified.
    """
    injection_times = [80]  # hours
    dose = 0.02                          # amount per hour
    infusion_duration = 1                   # hours

    for t_n in injection_times:
        if t_n <= t < (t_n + infusion_duration):
            return dose
    return 0

# Phage injection function
def phage_input(t):
    injection_times = [5]                # inject phages
    dose = 0                             # phage concentration
    infusion_duration = 1                # hours

    for t_n in injection_times:
        if t_n <= t < (t_n + infusion_duration):
            return dose
    return 0

# ODE system
def model(t, y, γ, e, ka, rS, K, i, d, b):
    C, S, P = y

    dC_dt = -γ * C + antibiotic_input(t)                         # Antibiotic decay + input
    dS_dt = rS * S * (1 - (S / K)) - (e * C * ka) - (i * S * P)  # Sensitive bacteria
    dP_dt = (b * i * S * P) - (d * P) + phage_input(t)           # Phage replication and decay
    return [dC_dt, dS_dt, dP_dt]

# Extract results
# Time settings
t_end = 126
timesteps = 126
t_eval = np.linspace(0, t_end, timesteps)

# Solve the system
result = solve_ivp(model, [0, timesteps], y0, args=(γ, e, ka, rS, K, i, d, b), method='LSODA', t_eval=t_eval)

# Extract results
C_concentration, S_population, P_population = result.y

# Plot results
plt.figure(figsize=(10, 5))
plt.plot(result.t, C_concentration, label="Antibiotic Concentration (C)", color='green')
plt.plot(result.t, S_population, label="Sensitive Bacteria (S)", color='blue')
plt.plot(result.t, P_population, label="Phage Population (P)", color='purple')
plt.xlabel("Time (hours)")
plt.ylabel("Population (cells/ml or PFU/ml) or [antibiotic] (µg/ml)")
plt.yscale("log")  # logarithmic scale for better visualization
plt.legend()
plt.title("IV. PAC therapy on susceptible bacteria")
plt.ylim(1e-9, 10**(9))
plt.grid(True, which="both", ls="--", lw=0.5)
plt.tight_layout()
plt.show()
