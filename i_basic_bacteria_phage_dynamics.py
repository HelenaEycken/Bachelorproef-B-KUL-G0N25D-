# -*- coding: utf-8 -*-
"""I. Basic bacteria-phage dynamics

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CmFuehMgLLGJN-SSlcP4gCI_J3kSdIOG
"""

############################################################
### I. Basic bacteria-phage dynamics - Helena Eycken, Margot Debruyne, Vincent Smets ###
############################################################

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
from scipy.integrate import solve_ivp

# Define parameters
rB = 1.85       # Growth rate of bacteria
kB = 10**(7.94) # Carrying capacity of bacteria
i = 10**(-6.21) # Adsorption rate by phages
d = 0.10        # Phage decay rate
b = 106         # Burst size

# Initial populations
B0 = 10**(4.48) # Initial bacterial population
P0 = 10**7      # Initial phage population
y0 = [B0, P0]

# def model(y, t, rB, kB, i, d):
# variables in the correct order for solve_ivp
def model(t, y, rB, kB, i, d):
    B, P = y  # Unpack populations
    dB_dt = rB * B * (1 - (B / kB)) - (i * B * P)
    dP_dt = (b * i * B * P) - (d * P)
    return [dB_dt, dP_dt]

# Time settings
timesteps = 126
t_eval = np.linspace(0, timesteps, timesteps)
# changed name of t for clarity

# Solve the ODE system
# result = odeint(model, y0, t, args=(rB, kB, i, d))
# changed for new package:
result = solve_ivp(model, [0, timesteps], y0, args=(rB, kB, i, d), method='LSODA', t_eval=t_eval)

# Extract results
#B_population, P_population = result.T
B_population, P_population = result.y #solve_ivp output

# Plot the results
plt.plot(result.t, B_population, label="Bacteria (B)", color='blue')
plt.plot(result.t, P_population, label="Phages (P)", color='red')
plt.xlabel("Time (hours)")
plt.ylabel("Population density (cells/ml or PFU/ml)")
# plt.yscale("log") # to see log scale
plt.legend()
plt.title("I. Basic bacteria-phage dynamics")
plt.ylim(-0.25e7, 1.75e7)  # Limits on y-axis
# plt.ylim(1e-8, 1e8)      # Limits on y-axis when using log scale
plt.show()