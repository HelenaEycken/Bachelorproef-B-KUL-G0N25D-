# -*- coding: utf-8 -*-
"""KAT II. Antibiotics on susceptible bacteria

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dAVshULdRQX6JKa7Crs65c_vdUDTmONz
"""

############################################################
### II. Antibiotics on susceptible bacteria - Helena Eycken, Margot Debruyne, Vincent Smets ###
############################################################
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

# Define parameters
rB = 1.85               # Growth rate of bacteria
kB = 10**(7.94)         # Carrying capacity of bacteria

e = 1                   # Efficacy of antibiotics
γ = 0.23                # Decay rate of antibiotics
Ca = 0.38               # Start concentration of antibiotics
k = 10**(5.4)           # Antibiotic killing constant

# Initial conditions
B0 = 10**(4.67)      # Initial bacterial population
y0 = [B0, Ca]        # Initial values for ODE solver

#-----------------------------------------------------------
# Piecewise antibiotic administration is possible:
# We model in dCa_dt an extra term 'antibiotic_input(t)' that allows for
# addition of a dose or multiple doses at specified time points
# Simply:
# antibiotic_input(t) = sum(dosis_i voor tn <= t <_n + duur )
# = step function in the dimension of time
#---------------------------------------------------

def antibiotic_input(t):
    """
    Determines how much of the antibiotic is added per time unit.
    We give an infusion of 1 hour.
    """
    # Suppose you want to administer the drug every 12 hours between t_n and t_n+1, do that with injection_times = [12, 24, 36]:
    injection_times = [0]  # start hour of infusion
    dose = 0  # antibioticum dose given per hour
    infusion_duration = 1  # infusion duration (in hours)

    for t_n in injection_times:
        if t_n <= t < (t_n + infusion_duration):
            return dose
    return 0 # No antibiotic administration outside of the administration intervals

# Model function
def model(t, y, rB, kB, e, γ, k):
    B, Ca = y  # Unpack variables
    dB_dt = rB * B * (1 - (B / kB)) - (e * Ca * k)  # Bacteria growth with antibiotic effect

    # Ab decay + piecewise administration
    dCa_dt = -γ * Ca + antibiotic_input(t) # Antibiotic decay
    return [dB_dt, dCa_dt]

# Time settings
timesteps = 126
t_eval = np.linspace(0, timesteps, timesteps)

# Solve the ODE system
result = solve_ivp(model, [0, timesteps], y0, args=(rB, kB, e, γ, k), method='LSODA', t_eval=t_eval)

# Extract results
B_population, C_concentration = result.y

# Plot the results
plt.figure(figsize=(8, 5))
plt.plot(result.t, B_population, label="Bacteria (B)", color='blue')
plt.plot(result.t, C_concentration, label="Antibiotic (C)", color='green')
plt.xlabel("Time (hours)")
plt.ylabel("Population (cells/ml) or [antibiotic] (µg/ml)")
plt.yscale("log") # use logscale, otherwise dynamics are not visible
plt.legend()
plt.title("II. Antibiotics on susceptible bacteria")
plt.ylim(0, 1e9)  # adjust the limits on y-axis
plt.show()